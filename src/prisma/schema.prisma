generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    createdAt         DateTime @default(now()) @map(name: "created_at")
    updatedAt         DateTime @updatedAt @map(name: "updated_at")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(cuid())
    userId       String
    sessionToken String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])

    @@map(name: "sessions")
}

model User {
    id            String    @id @default(cuid())
    email         String?   @unique
    name          String?
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @updatedAt @map(name: "updated_at")
    bookmarkIds   String[]
    bio           String?

    accounts            Account[]
    sessions            Session[]
    Invoice             Invoice[]
    basicInvoiceDetails basicInvoiceDetails[]

    @@map(name: "users")
}

enum Template {
    modern
    sleek
}

enum Status {
    Draft
    Sent
    Paid
    Overdue
}

model Invoice {
    id     String @id @default(cuid())
    userId String

    template    Template
    content     String
    status      Status
    name        String
    totalAmount String

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    user User @relation(fields: [userId], references: [id])

    @@map(name: "invoices")
}

model basicInvoiceDetails {
    id        String   @id @default(cuid())
    userId    String
    address   String
    city      String
    state     String
    zip       String
    country   String
    phone     String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    isSender Boolean

    user User @relation(fields: [userId], references: [id])

    @@map(name: "basic_details")
}
